namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace atom = "http://www.w3.org/2005/Atom"
namespace cs = "http://purl.org/net/xbiblio/csl"
namespace dc = "http://purl.org/dc/elements/1.1/"
namespace s = "http://www.ascc.net/xml/schematron"
namespace xhtml = "http://www.w3.org/1999/xhtml"

# CSL schema metadata

dc:title [ "Citation Style Language" ]
dc:creator [ "Bruce D'Arcus" ]
dc:creator [ "Simon Kornblith" ]
dc:copyright [ "Bruce D'Arcus and Simon Kornblith, 2007-2009" ]
dc:rights [ "Permission to freely use, copy and distribute." ]
dc:description [
    "Citation Style Language (CSL) schema for describing bibliographic and citation formatting."
]

## Root element. cs:style for CSL styles, cs:locale for locales-xx-XX.xml files
start = style | locale

## Subparts of the CSL schema
include "csl-terms.rnc"
include "csl-types.rnc"
include "csl-variables.rnc"
include "csl-categories.rnc"

# Embedded Schematron rules to detect undefined macro-calls in cs:text, cs:key

s:rule [
    context = "//cs:text[@macro]"
    s:assert [
        test = "@macro = /cs:style/cs:macro/@name"
        "This macro call has no corresponding macro."
    ]
]
s:rule [
    context = "//cs:key[@macro]"
    s:assert [
        test = "@macro = /cs:style/cs:macro/@name"
        "This macro call has no corresponding macro."
    ]
]

## The CSL data model consists of resources and variables. Primary resources are the 
## citation object itself, as well as related agents and events. Variables are 
## attributes of the resource: titles, dates, volume numbers, and so forth. From the 
## perspective of CSL, resources templates involve a list of variables. By contrast, 
## a variable can be accessed directly.
## In addition, CSL also contains structures for macros and parameter options.
div {
    style =
        element cs:style {
            
            ## The version of the CSL schema
            attribute version { "1.0" },
            
            ## Default style locale (optional)
            attribute default-locale { xsd:language }?,
            
            ## Style type (in-text citations or note-based)
            attribute class { "in-text" | "note" },
            
            ## Abbreviation setting of ranges in the page variable
            ## (by default no reformatting is applied to the input data)
            attribute page-range-format { "expanded" | "minimal" | "chicago" }?,
            
            ## Determines whether the non-dropping particle is demoted in inverted
            ## names (e.g. "Koning, W. de"). Default is "display-and-sort".
            attribute demote-non-dropping-particle { "never" | "sort-only" | "display-and-sort" }?,
            
            ## Determines whether compound given names (e.g. "Jean-Luc") are
            ## initialized with (J-L) or without a hyphen (JL). Defaults to true.
            attribute initialize-with-hyphen { xsd:boolean }?,
            
            name-opt,
            names-opt,
            info,
            (style-locale* & macro* & citation & bibliography?)?
        }
}
[ a:documentation [ xhtml:h2 [ "Style Metadata" ] ] ]
div {
    
    ## The Content model for CSL metadata is borrowed from Atom.
    info =
        element cs:info {
            info-author*
            & info-category*
            & info-contributor*
            & info-id
            & info-issn*
            & info-issnl?
            & info-link*
            & info-published?
            & info-rights?
            & info-summary?
            & info-title
            & info-updated
        }
    info-text =
        attribute xml:lang { xsd:language }?,
        text
    info-author = element cs:author { info-Contributor-pattern }
    info-Contributor-pattern =
        element cs:name { text }
        & element cs:email { text }?
        & element cs:uri { xsd:anyURI }?
    info-contributor = element cs:contributor { info-Contributor-pattern }
    
    ## The scheme attribute should be understood to specify the controlled 
    ## CSL category list. The terms thus typically include further logic, 
    ## such as the broader categories to which they belong ("humanities", 
    ## "social sciences") as well as the class of style ("author-date", "note", etc.).
    info-category =
        element cs:category {
            attribute citation-format { info-format-categories }
            | attribute field { info-field-categories }
        }
    
    ## As in Atom, the cs:id element is a required URI that is globally-unique 
    ## and persistant. Once assigned it should never change. Ideally, of course, 
    ## the URI resolves to the correct CSL file.
    info-id = element cs:id { xsd:anyURI }
    info-link =
        element cs:link {
            attribute href { xsd:anyURI },
            
            ## For transformation to Atom, the rel values should be expanded to include the 
            ## base URI <http://purl.org/net/xbiblio/csl/relations#>.
            attribute rel {
                
                ## The URI of the CSL style itself. Used for (automatic) style
                ## updating.
                "self"
                | 
                  ## The CSL style URI whose configuration content should be
                  ## used for processing. Required for dependent styles.
                  "independent-parent"
                | 
                  ## The CSL style URI from which the current style is derived.
                  "template"
                | 
                  ## A documentation URI for the style.
                  "documentation"
            },
            string
        }
    info-published = element cs:published { xsd:dateTime }
    info-rights = element cs:rights { info-text }
    info-summary = element cs:summary { info-text }
    info-title = element cs:title { info-text }
    
    ## For journal-dedicated styles the journal's ISSNs or ISSN-L may be included.
    ## A valid ISSN(-L) consists of: four digits, a hyphen, three digits, and a 
    ## check digit, which can be a numeral digit or a roman X, e.g. "1234-1231".
    info-issn =
        element cs:issn {
            xsd:string { pattern = "\d{4}\-\d{3}(\d|x|X)" }
        }
    info-issnl =
        element cs:issnl {
            xsd:string { pattern = "\d{4}\-\d{3}(\d|x|X)" }
        }
    
    ## a required update date-time stamp; for example, 2007-10-26T21:32:52+02:00
    info-updated = element cs:updated { xsd:dateTime }
}
[ a:documentation [ xhtml:h2 [ "Localized Terms" ] ] ]
div {
    
    ## "symbol" and reverts to "short" if no term exists
    ## "verb-short" reverts to "verb" if no term exists
    ## all others revert to "long" if no term exists
    cs-term-forms = "long" | "verb" | "short" | "verb-short" | "symbol" | cs-term-forms.extension
    
    ## Extension structures. You may override these in a customization 
    ## schema. If you do, please contact the xbiblio project to add 
    ## the term or form to the formal controlled list in the schema.
    div {
        cs-terms.extension = notAllowed
        cs-term-forms.extension = notAllowed
    }
}
[ a:documentation [ xhtml:h2 [ "Locales" ] ] ]
div {
    
    ## The structure of standalone locale files
    locale =
        element cs:locale {
            
            ## Specifies the locale of the locale file.
            attribute xml:lang { xsd:language }
            & 
              ## Terms are localized strings used as content for the cs:text field.
              localized-terms
            & localized-dates+
            & localized-options
        }
    
    ## A language-specific wrapper.
    style-locale =
        element cs:locale {
            
            ## Where localization is other than that of the style, use the 
            ## xml:lang attribute.
            attribute xml:lang { xsd:language }
            & 
              ## Terms are localized strings used as content for the cs:text field. 
              ## It is only needed where you need to add a term not supported by 
              ## default, or override an existing one.
              localized-terms?
            & localized-dates*
            & localized-options?
        }
    localized-terms = element cs:terms { (simple-term | compound-term)+ }
    term-attributes =
        attribute form { cs-term-forms }?,
        attribute name { cs-terms }
    
    ## Simple terms are basic strings, used to represent genres, media, etc.
    simple-term = element cs:term { term-attributes, text }
    
    ## Compound terms are those whose output can be either singular or plural. 
    ## Typically used for things like page number or editor labels.
    compound-term = element cs:term { term-attributes, single-term, multiple-term }
    multiple-term = element cs:multiple { text }
    single-term = element cs:single { text }
    
    ## Instances of cs:date for which the form attribute is set are localized
    ## by default. Localized date formats can be overridden.
    localized-dates =
        element cs:date {
            
            ## Declares the type of date being defined.
            attribute form {
                
                ## Text form of the date (e.g. "December 15, 2005" for en-US).
                "text"
                | 
                  ## Numeric form of the date (e.g. "12-15-2005" for en-US)
                  "numeric"
            },
            
            ## No affixes may be applied to cs:date in cs:locale
            formatting,
            delimiter,
            element cs:date-part { affixes, formatting, (month | day | year) }+
        }
    
    ## Locale specific options.
    localized-options =
        
        ## Localized global options are specified as attributes in the
        ## cs:style-options element. If future versions of CSL include localized
        ## options that are citation or bibliography specific, the elements
        ## cs:citation-options and cs:bibliography-options can be added.
        element cs:style-options {
            
            ## Determines whether punctuation (commas and periods) goes within 
            ## the quotation marks, or outside (default).
            attribute punctuation-in-quote { xsd:boolean }?
        }
}
[ a:documentation [ xhtml:h2 [ "Contributor Names" ] ] ]
div {
    ## Options for cs:names, available for cs:style, cs:citation and cs:bibliography.
    names-opt =
        ## Delimiter between names (delimiter between variables is on <names>
        ## tag, where it should be). This is ", " in "J. Doe, S. Smith."
        attribute names-delimiter { text }?
    
    names-attributes =
        affixes,
        formatting,
        
        ## the delimiter between name groups
        delimiter,
        attribute variable {
            list { cs-names+ }
        }
    
    ## Options for cs:name, available for cs:style, cs:citation and cs:bibliography.
    name-opt =
        name-attributes,
	
	## Indicates long (first name + last name, for Western names) or short
	## (last name only, for Western names) form of name. Default is long
	## form. The "count" form is used to return the count of the contributor
	## list, and may be used in special sorting routines.
	attribute name-form { "long" | "short" | "count" }?,
	
	## Delimiter between names (delimiter between variables is on <names>
	## tag, where it should be). This is ", " in "J. Doe, S. Smith."
	attribute name-delimiter { text }?
    
    name-attributes =
        ## Controls appearance of "and"/"&". To disable, do not specify.
        attribute and { "text" | "symbol" }?,
        
        ## Delimiter preceding the last name in a name list
        attribute delimiter-precedes-last {
        
            ## Default behavior; delimiter is included for name lists of length
            ## three or more:
            ## 2 authors: "J. Doe and T. Timmons,"
            ## 3 authors: "J. Doe, S. Smith, and T. Timmons" (note comma preceding 'and').
            "contextual"
            | 
              ## Delimiter is always included
              ## 2 author result: "J. Doe, and T. Timmons"
              ## 3 authors: "J. Doe, S. Smith, and T. Timmons" (note comma preceding 'and').
              "always"
            | 
              ## Delimiter is never included
              ## 2 authors: "J. Doe and T. Timmons,"
              ## 3 authors: "J. Doe, S. Smith and T. Timmons"
              "never"
            }?,
        
        ## Specifies when "et al." name list abbreviation is used
        ##   et-al-min: the minimum number of contributors to use "et al."
        ##   et-al-use-first: the number of contributors to print before "et al."
        ##   et-al-subsequent-*: as above, but for subsequent citations
        attribute et-al-min { xsd:integer }?,
        attribute et-al-use-first { xsd:integer }?,
        attribute et-al-subsequent-min { xsd:integer }?,
        attribute et-al-subsequent-use-first { xsd:integer }?,
        
        ## Indicates whether given name parts ought to be given as initials
        ## (e.g., J. K. Rowling) and the text to follow each initial.
        attribute initialize-with { text }?,
        
        ## Sets the author name order to correspond to the sort order of
        ## the bibliography; e.g. Doe, John (name-as-sort-order) vs. John Doe (w/o
        ## attribute).
        attribute name-as-sort-order {
        
            ## Applies name-as-sort-order to first author only.
            "first"
            | 
              ## Applies name-as-sort-order to all authors.
              "all"
            }?,
        
        ## The delimiter for personal name parts where sort order differs from 
        ## display order (for example, in standard Western names). This is the
        ## ", " in "Doe, John."
        attribute sort-separator { text }?
    
    names =
        element cs:names {
            names-attributes,
            ((name, et-al?) & name-label*),
            substitute?
        }
    
    ## Short version of "names" element, without children, allowed in <substitute>
    names-short = element cs:names { names-attributes }
    
    name =
        element cs:name {
            name-attributes,
            affixes,
            formatting,
            
            ## Indicates long (first name + last name, for Western names) or short
            ## (last name only, for Western names) form of name. Default is long
            ## form. The "count" form is used to return the count of the contributor
            ## list, and may be used in special sorting routines.
            attribute form { "long" | "short" | "count" }?,
            
            ## Delimiter between names (delimiter between variables is on <names>
            ## tag, where it should be). This is ", " in "J. Doe, S. Smith."
            delimiter,
            
            ## Allows for separate configuration of name part formatting. For example, 
            ## Jane DOE. Order of these elements is not significant.
            element cs:name-part {
                attribute name { "family" | "given" },
                text-case,
                formatting
            }*
        }
    
    ## Similar to label as below, but inherits variable from <names> tag
    name-label = element cs:label { label-primitives }
    
    ## Configures formatting of the et al substitution. Only necessary to deviate from 
    ## default rendering (for example, to italicize the string).
    et-al =
        element cs:et-al {
            
            ## term to use for et al substitution; "et-al" is default
            attribute term { "et-al" | "and others" }?,
            affixes,
            formatting
        }
    
    ## Substitutions, if the name does not exist
    substitute = element cs:substitute { (names-short | cs-element)+ }
}
[ a:documentation [ xhtml:h2 [ "Dates" ] ] ]
div {
    date =
        element cs:date {
            attribute variable { cs-dates },
            ((
              ## Localized date formats are specified by setting `form`. The
              ## default date format can be changed for all locales by configuring
              ## the date-parts attribute and date-part elements.
              attribute form {
                  
                  ## Use the localized text form of the date (e.g. "December 15, 2005" for en-US).
                  "text"
                  | 
                    ## Use the localized numeric form of the date (e.g. "12-15-2005" for en-US)
                    "numeric"
              }?,
              
              ## The date-parts attribute may be set to show fewer date elements.
              attribute date-parts {
                  
                  ## Year, month and day (default)
                  "year-month-day"
                  | 
                    ## Year and month
                    "year-month"
                  | 
                    ## Year only
                    "year"
              }?,
              
              ## If the form attribute is set, date-part can be used to override
              ## layout options as defined in the locales, except for affixes and
              ## formatting (e.g. to change the localized date to use leading-zeros,
              ## or the short form of month). The order of date-parts has no effect
              ## on how localized dates are presented.
              element cs:date-part { text-case, formatting, (month | day | year) }*)
             | (
                ## Non-localized dates are formatted by including, in the desired
                ## order, the relevant `date-part`-elements, and by applying formatting,
                ## affixes on cs:date and cs:date-part.
                element cs:date-part {
                    affixes, text-case, formatting, (month | day | year)
                }+,
                delimiter)),
            affixes,
            formatting
        }
    
    ## Month formats:
    ##     long (default): January
    ##     short: Jan
    ##     numeric: 1
    ##     numeric-leading-zeros: 01
    month =
        attribute name { "month" },
        (attribute form { "long" | "short" | "numeric" | "numeric-leading-zeros" }?,
         strip-periods)
    
    ## Day formats:
    ##     numeric (default): 5
    ##     numeric-leading-zeros: 05
    ##     ordinal: 5th
    day =
        attribute name { "day" },
        attribute form { "numeric" | "numeric-leading-zeros" | "ordinal" }?
    
    ## Year formats:
    ##     long (default): 2005
    ##     short: 05
    year =
        attribute name { "year" },
        attribute form { "short" | "long" }?
    
    
}
[ a:documentation [ xhtml:h2 [ "Formatting Text" ] ] ]
div {
    
    ## The cs:text element is the main formatting element used to layout down content.    
    cs-text =
        element cs:text {
            affixes,
            formatting,
            text-case,
            strip-periods,
            ((
              ## adds a variable belonging to this item
              attribute variable { cs-variables },
              attribute form { "short" | "long" }?)
             | 
               ## adds the results of a macro, as specified in the main body of the CSL
               attribute macro { token }
             | (
                ## adds a localized term
                attribute term { cs-terms },
                attribute form { cs-term-forms }?,
                
                ## chooses between the single ("false", default) and multiple ("true") version of a term
                attribute plural { xsd:boolean }?)
             | 
               ## adds the text in the value field. use sparingly.
               ## when dealing with localizable text, <text term="(term)"/> should be
               ## used, even if this means defining a new term.
               attribute value { text })
        }
    
    ## The number markup directive matches the first number found in a field, 
    ## and returns only that component. If no number is detected, the result 
    ## is empty. A non-empty number may be subject to further formatting consisting 
    ## of a form attribute whose value may be numeric, ordinal or roman to format 
    ## it as a simple number (the default), an ordinal number (1st, 2nd, 3rd etc), 
    ## a long-ordinal (first, second, third, etc), or roman (i, ii, iii, iv etc). 
    ## The text-case can also apply to capitalize the roman numbers for instance. 
    ## The other normal formatting rules apply too (font-style, ...). When used 
    ## in a conditional, number tests if there is a number present, allowing conditional 
    ## formatting.
    cs-number =
        element cs:number {
            affixes,
            formatting,
            text-case,
            attribute variable { "edition" | "volume" | "issue" | "number" | "number-of-volumes" },
            attribute form { "numeric" | "ordinal" | "roman" | "long-ordinal" }?
        }
}
[ a:documentation [ xhtml:h2 [ "Label Text" ] ] ]
div {
    
    ## The label element is used to print text terms that depend on document content
    ## for pluralization. For labeling pages, this is preferable, as pages may be
    ## either singular or plural (p. or pp.)
    label =
        element cs:label {
            label-primitives,
            attribute variable { "page" | "locator" }
        }
    label-primitives =
        affixes,
        formatting,
        text-case,
        strip-periods,
        attribute form { cs-term-forms },
        
        ## modifies pluralization behavior (defaults to "contextual")
        attribute plural { "always" | "never" | "contextual" }?
}
[ a:documentation [ xhtml:h2 [ "Macros" ] ] ]
div {
    
    ## The macro element works something like in BibTeX, and provides a ready-made 
    ## bundle of formatting templates that can be easily reused elsewhere.
    macro =
        element cs:macro {
            attribute name { token },
            cs-element+
        }
}
[ a:documentation [ xhtml:h2 [ "Groups" ] ] ]
div {
    
    ## Group is used to provide delimiters and a common prefix/suffix. It is syntactic 
    ## sugar for a conditional that tests for the presence of any non-null child variable 
    ## or macro call results. So if there are no such results, then any <text term="(term)"> 
    ## content will not be printed.
    group = element cs:group { affixes, formatting, delimiter, cs-element+ }
}
div {
    citation-layout = element cs:layout { affixes, formatting, delimiter, cs-element }
    bibliography-layout = element cs:layout { affixes, formatting, cs-element }
    cs-element = (names | date | label | cs-text | cs-number | choose | group)+
}
[ a:documentation [ xhtml:h2 [ "Citation" ] ] ]
div {
    
    ## The cs:citation handles printing of citations. A citation may consist of 
    ## one-or-more references to bibliographic sources. These references can either 
    ## be simple in-text keys [doe99] or numeric markers [1], or more complex short 
    ## descriptors generated at runtime common in author-date (Doe, 1999a) or note-based
    ## styles.  
    ## note: one issue unique to note-based styles is that a citation reference 
    ## effectively may become a full sentence. Implementers should consider this in 
    ## their design and insert the final formatted citation in the correct title form.
    ## For example, if a citation is footnoted without any additional text, the first 
    ## character of the output should be uppercased. By contrast, if the citation is 
    ## within a pre-existing footnote, and preceded by non-citation text, then it should 
    ## be printed as is.
    citation = element cs:citation { (citation-options & sort?), citation-layout }
}
[ a:documentation [ xhtml:h2 [ "Bibliography" ] ] ]
div {
    bibliography = element cs:bibliography { (bibliography-options & sort?), bibliography-layout }
}
[ a:documentation [ xhtml:h2 [ "Options" ] ] ]
div {
    citation-options =
        disambiguate-opt,
        disambiguate-rule-opt,
        collapse-opt,
        collapse-delimiter-opt,
        position-opt,
        name-opt,
        names-opt
    bibliography-options =
        hanging-indent-opt,
        second-field-align-opt,
        subsequent-author-substitute-opt,
        line-formatting-opt,
        name-opt,
        names-opt
    
    ## sets the bibliographic entries to be rendered with hanging-indents
    hanging-indent-opt = attribute hanging-indent { xsd:boolean }?
    
    ## The collapse option can be used to provide for the collapsing
    ## of citations in one of several ways.
    collapse-opt =
        attribute collapse {
            
            ## "citation-number" collapses numeric citations from
            ## [1, 2, 3] to [1-3]
            "citation-number"
            | 
              ## "year" collapses authors from (Doe 2000, Doe 2001) to
              ## (Doe 2000, 2001)
              "year"
            | 
              ## "year-suffix" collapses as "year", but also collapses
              ##  (Doe 2000a, Doe 2000b) to (Doe 2000a, b). (ignored if
              ##  disambiguate-add-year-suffix is missing)
              "year-suffix"
            | 
              ## "year-suffix-ranged" collapses as "year-suffix", but
              ## also collapses ranges of year-suffix markers, so (Doe
              ## 2000a, Doe 2000b, Doe 2000c) becomes (Doe
              ## 2000a-c). (also ignored if
              ## disambiguate-add-year-suffix is missing)
              "year-suffix-ranged"
        }?
    
    ## Collapse delimiter options.
    ## The options below provide fine-grained control over the
    ## way collapsed citations are joined together in a citation.
    collapse-delimiter-opt =
        
        ## Use this option to specify the delimiter between
        ## year-suffix elements, when year-suffix collapsing
        ## takes place.  Otherwise, the delimiter defaults to
        ## that specified for the citation layout.  For example,
        ## with year-suffix collapsing, and with a layout delimiter 
        ## of "; " and a year-suffix-delimiter of ",", cites to 
        ## "Smith 1999a", "Smith 1999b", "Smith 2000" and 
        ## "Jones 2001" would be collapsed to:
        ## 
        ## >  (Smith 1999a,b; 2000; Jones 2001)
        attribute year-suffix-delimiter { text }?,
        
        ## Use this option to specify the delimiter that should
        ## *follow* a group of collapsed cites, when the
        ## next cite in the citation is not collapsed.  For
        ## example, with year-suffix collapsing, and with a
        ## layout delimiter of ", " and an after-collapse-delimiter
        ## of "; ", cites to "Smith 1999a", "Smith 1999b",
        ## "Smith 2000", "Jones 2001" and "Brown 2007" would 
        ## collapse to:
        ## 
        ## >  (Smith 1999a, b, 2000; Jones 2001, Brown 2007)
        attribute after-collapse-delimiter { text }?
    
    ## The number of notes (footnotes or endnotes) within which a
    ## preceding reference to the same source must occur in order for
    ## position="near-note" to be true.  The default is 5, use this 
    ## option to set a different value.
    position-opt = attribute near-note-distance { xsd:integer }?
    
    ## second-field-align is useful for formatting a numbered list. It aligns
    ## any subsequent lines of a bibliography entry with the beginning of the
    ## second field. For example, if the first field is
    ## <text variable="citation-number" suffix=". "/>
    ## 
    ## 1. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
    ##    eiusmod
    ## 
    ## If set to "margin," then the first field is put in the margin and all
    ## subsequent lines of text are aligned with the margin. This is useful for
    ## IEEE style.
    second-field-align-opt = attribute second-field-align { "flush" | "margin" }?
    
    ## substitutes subsequent recurrences of an author for a given string
    subsequent-author-substitute-opt = attribute subsequent-author-substitute { text }?
    
    ## Options to set parameters relating to disambiguation.
    ## Disambiguation is an unavoidably complex process, the aim of
    ## which is to answer three questions for every short-form cite
    ## in the document:
    ## 
    ## 1. How many of the creator names should be used in the cite?
    ## 2. What should be the form of each of the names?
    ## 3. If the attempt to uniquely identify the target reference by
    ##    manipulating the presentation of names in the cite fails, what
    ##    should done for a fallback attempt at disambiguation?
    ## 
    ## The initial answer to the first question is determined
    ## according to the et-al-subsequent-min
    ## and et-al-subsequent-use-first
    ## settings for citations.  The initial answer to the second
    ## is given by the form attribute of the name element rendered
    ## (i.e. form="short", or the default form="long"), together with the
    ## initialize-with attribute (which determines the initial form of given
    ## names when they are used).
    ## 
    ## The top two of the options below control whether the initial
    ## answers to the first and second questions, respectively, are to
    ## be revised as needed to uniquely identify the target source.
    ## The operation of the first option ("disambiguate-add-names") is
    ## very simple when it is used alone: the constraint imposed by
    ## et-al-subsequent-use-first is relaxed incrementally until either the
    ## cited source can be uniquely identified, or available names are
    ## exhausted and disambiguation fails.  
    ## 
    ## The second option is more complex.  In addition to the
    ## explanation provided below, it should be remembered that
    ## when disambiguate-add-givenname is used, a name added by
    ## disambiguate-add-names can, by the fact of the addition, cause the form of
    ## the name itself to change, throughout the document, even when
    ## the change is not required to uniquely identify the target
    ## resource.  This is because the purpose of the given name disambiguation
    ## rules (excepting the "by-cite" rule) is global disambiguation of *names*, 
    ## not cites, and so must be applied to names when they are newly
    ## added.
    ## 
    ## The third option below is used to select one of two possible
    ## fallback methods (the other being to try the cite one last time
    ## with the "disambiguate" variable set to true).
    disambiguate-opt =
        
        ## When set true, add further names to uniquely identify the
        ## target source, overriding the constraint imposed by
        ## et-al-subsequent-use-first.  The exact rendering of 
        ## any names added is determined by applying, in order:
        ## the form ("long" or "short"); the initialize-with
        ## attribute, if present; and a given name disambiguation rule,
        ## if disambiguate-add-givenname is set true.
        attribute disambiguate-add-names { xsd:boolean }?,
        
        ## When set true, transform names as required by
        ## by the rule specified by givenname-disambiguation-rule,
        ## or use the "all-names" rule by default.  Note that,
        ## all of the given name disambiguation rules except for
        ## the "by-cite" rule, a name transformation will affect
        ## the way the name is rendered in multiple references,
        attribute disambiguate-add-givenname { xsd:boolean }?,
        
        ## disambiguate-add-year-suffix: add a suffix to the year
        ## (e.g., 2007a) when there are two works by the same
        ## author published in the same year included in one
        ## bibliography.
        attribute disambiguate-add-year-suffix { xsd:boolean }?
    disambiguate-rule-opt =
        attribute givenname-disambiguation-rule {
            
            ## The default given name disambiguation rule.  A given
            ## name is first formatted as specified by the attributes
            ## to name (form, initialize-with).  If the resulting name
            ## does not uniquely identify the full name of the
            ## individual, it is progressively transformed in the following
            ## progression, until disambiguation succeeds:
            ## 
            ## 1. "short" becomes "long" + "initialize-with" if the latter is defined
            ## 2. "long" + "initialize-with" becomes "long" if the former is defined
            ## 3. "short" becomes "long"
            ## 
            ## Note that if the name begins in long form with the
            ## given name as initials, step 1 in this list will be
            ## skipped.  Likewise, if the name begins in short form
            ## and the initialize-with attribute is not set, steps
            ## 1 and 2 will be skipped.  If the name begins
            ## in long form, this option will have no effect.
            "all-names"
            | 
              ## Same as the "all-names" rule above, but omitting
              ## steps 2 and 3 of that rule.
              "all-names-with-initials"
            | 
              ## Same as the "all-names" rule above, but ambiguity
              ## is only checked for the first-listed name
              ## source, and only first-listed names are affected
              ## by the transformation.
              "primary-name"
            | 
              ## Same as the "primary-name" rule above, but omitting
              ## steps 2 and 3 of that rule.
              "primary-name-with-initials"
            | 
              ## Apply the transformation described under the "all-names"
              ## rule above, but limit the transformation to the current
              ## source.  The appearance of the name in other references
              ## will not be affected.
              "by-cite"
        }?
    
    ## defines spacing between entries and between lines
    ##     line-spacing: in units of lines; default 1
    ##     entry-spacing: in units of line-spacing; default 1
    line-formatting-opt =
        attribute line-spacing { xsd:integer }?,
        attribute entry-spacing { xsd:integer }?
}
[ a:documentation [ xhtml:h2 [ "Sorting" ] ] ]
div {
    all-variables = cs-variables | cs-dates | cs-names
    
    ## The sort element specifies the sort order for a citation or for the
    ## bibliography. If it is not added, citations are sorted according to user
    ## preferences, and bibliography is sorted according to order cited.
    sort = element cs:sort { key+ }
    key =
        element cs:key {
            
            ## Sort keys may be generated either directly from a
            ## variable, or by calling a macro.  In either case, the
            ## value returned for sorting purposes may differ from the
            ## "ordinary" rendered value of a variable.  Refer to the
            ## notes below as a guide when building a sort algorithm
            ## for a new style.
            ## 
            ## *The* **variable** *attribute*
            ## 
            ## When ordinary variables are referenced in a sort key
            ## via the variable attribute, the string value is
            ## returned, without formatting decorations and without
            ## text escaping.  Names, dates and numbers are returned
            ## in a default format, as follows:
            ##  
            ## > **names:** Name variables can be set directly on a
            ## > key using the variable attribute.  In this case, the
            ## > name-list from the variable will be returned as a
            ## > string in the long form of names, formatted using
            ## > name-as-sort-order.  However, we strongly discourage
            ## > use of the variable attribute for name variables;
            ## > it is simpler and more reliable to use a macro
            ## > call to the same macro used to render creator names
            ## > in the context (citation or bibliography) to which
            ## > the sort applies.
            ## >   
            ## > **date:** Date variables are returned to a sort key
            ## > formatted as YYYY-MM-DD, zero-padded, with zero values 
            ## > for any missing elements.  In contrast to name variables,
            ## > it is often more reliable to set sort keys for dates
            ## > using the variable attribute, rather than calling
            ## > a macro that returns a string that may well not be
            ## > appropriate to sorting purposes.
            ## >  
            ## > **number:** The number is returned as a numeric
            ## > integer value.  In the rare case that numbers are
            ## > included in a sort, it is unlikely that a form
            ## > transformation (i.e. to roman, year-suffix or ordinal)
            ## > will be desired.  Numeric variables should ordinarily
            ## > be referenced via the variable attribute, rather than
            ## > via a macro.
            ## 
            ## *the* **macro** *attribute*
            ##     
            ## When a macro is called via a sort key, it returns whatever
            ## string value the macro would ordinarily generate, but stripped
            ## of any formatting decorations, and without text escaping.
            ## As indicated above, using a macro to set a sort key is
            ## most likely to be useful for names.  There are some special
            ## considerations for name variables, which are detailed
            ## below.
            ## 
            ## > **names:** Sort keys of two types may be produced
            ## > using the names element.
            ## 
            ## > > Keys for sorting a list of names may be obtained
            ## > > from any macro that generates names of form "short"
            ## > > or "long".  The only exception to ordinary
            ## > > rendering is that "et al." is not appended to names
            ## > > used in sort keys.
            ## > >
            ## > > Keys for sorting by the number of names in a
            ## > > names-list (i.e. the number of authors of an item)
            ## > > may be obtained from names returned with
            ## > > form="count" (i.e. if the form-attribute of name is
            ## > > set to "count" for a name variable that would
            ## > > otherwise return "Jones, Smith, Doe", a count value
            ## > > of 3 would be obtained).
            (attribute variable { all-variables }
             | attribute macro { token }),
            
            ## Default sort order is ascending
            attribute sort { "ascending" | "descending" }?,
            
            ## For all forms of the name element (long, short,
            ## count), the number of names used in the sort can be
            ## constrained with the names-min and names-use-first
            ## attributes. If these attributes are set, their values
            ## override those of the corresponding et-al-min and
            ## et-al-use-first options, affecting all names generated
            ## by all macros called by the key
            (attribute names-min { xsd:integer },
             attribute names-use-first { xsd:integer })?
        }
}
[ a:documentation [ xhtml:h2 [ "Conditional Statements" ] ] ]
div {
    
    ## The choose elements provides a simple conditional structure.
    choose = element cs:choose { if, else-if*, else? }
    if = element cs:if { condition, cs-element* }
    else-if = element cs:else-if { condition, cs-element* }
    else = element cs:else { cs-element+ }
    condition =
        
        ## If the item is of any of the given types, this is true
        attribute type {
            list { cs-types+ }
        }?,
        
        ## If any of the given variables exist, this is true
        attribute variable {
            list { all-variables+ }
        }?,
        
        ## If any of the given variables contain numeric data, this is true
        attribute is-numeric {
            list { all-variables+ }
        }?,
        
        ## The boolean operators below indicate the relative position of a 
        ## reference within the document.  These should be checked in 
        ## the order shown below: "first" is true only once, on the first
        ## use of the reference; when "ibid-with-locator" is true, "ibid"
        ## and "subsequent are also true; and when "ibid" is true, "subsequent"
        ## is also true.  The "near-note" operator is true if and only if the
        ## reference has been used within five footnotes (or endnotes, as the 
        ## case may be), counting backward from the current note.  This threshold
        ## may be adjusted using the "near-note-distance" option.  The value of 
        ## "near-note" is *always* false for references that are not in a 
        ## footnote/endnote.
        attribute position {
            list { ("first" | "subsequent" | "ibid" | "ibid-with-locator" | "near-note")+ }
        }?,
        
        ## If text inside an <if disambiguate="true"> block can be used to
        ## differentiate two otherwise identical citations, it will be added.
        ## If the citations remain identical after its addition, it will not
        ## be added.  This attempt at disambiguation will be made only if
        ## all other disambiguation methods have failed to uniquely identify
        ## the target source.
        attribute disambiguate { xsd:boolean }?,
        
        ## A conditional on the locator for this specific entry
        attribute locator {
            list { cs-terms.locator+ }
        }?,
        attribute match { "all" | "any" | "none" }?
}

## Formatting attributes.
div {
    delimiter = attribute delimiter { text }?
    affixes =
        attribute prefix { text }?,
        attribute suffix { text }?
    text-case =
        attribute text-case {
            
            ## display all text as lowercase
            "lowercase"
            | 
              ## display all text as uppercase
              "uppercase"
            | 
              ## capitalize first character; other characters
              ## displayed as is
              "capitalize-first"
            | 
              ## capitalize first character of every word;
              ## other characters displayed lowercase
              "capitalize-all"
            | 
              ## display as title case (the Chicago Manual
              ## of Style calls this "headline style")
              "title"
            | 
              ## display as sentence case/sentence style
              "sentence"
        }?
    
    ## attributes are drawn directly from CSS and FO where possible
    formatting =
        attribute font-style { "italic" | "normal" | "oblique" }?,
        attribute font-variant { "normal" | "small-caps" }?,
        attribute font-weight { "normal" | "bold" | "light" }?,
        attribute text-decoration { "none" | "underline" }?,
        attribute vertical-align { "baseline" | "sup" | "sub" }?,
        
        ## The text of each individual cite is normally formatted as a
        ## single continuous run of text.  Portions of the cite text can be
        ## specially positioned using the display attribute.
        attribute display {
            
            ## Set the display value set to "block" to place the content
            ## in a block stretching from margin to margin.
            "block"
            | 
              ## Set the display value set to "left-margin" to place the
              ## content in a block of fixed width starting at the left 
              ## margin.  All "left-margin" blocks in a bibliography share
              ## the same width, set according to the maximum number of
              ## characters appearing in any one such block.
              "left-margin"
            | 
              ## Set the display value to "right-inline" to place the
              ## content in a block directly to the right of any immediately
              ## preceding "left-margin" block, and extending to the
              ## right margin.
              "right-inline"
            | 
              ## Set the display value to "indent" to block-indent the
              ## text to the right by a standard amount.
              "indent"
        }?,
        
        ## When set true, places quotes around the rendered text.  The
        ## style of quotes used is locale dependent, and may vary if
        ## quotes are nested within the cite.
        attribute quotes { xsd:boolean }?
    
    ## Removes any periods from the rendered text (defaults to false)
    strip-periods = attribute strip-periods { xsd:boolean }?
}
